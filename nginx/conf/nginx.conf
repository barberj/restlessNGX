worker_processes 2;

events {
  worker_connections 1024;
}

http {
  access_log off;

  keepalive_timeout 65;
  resolver 8.8.8.8;

  lua_ssl_trusted_certificate "root-certs.pem";
  lua_ssl_verify_depth 2;
  lua_package_path "$prefix/lualib/?.lua;;";

  lua_shared_dict locks 1M;
  lua_shared_dict cache 10M;

  # see https://github.com/openresty/lua-resty-core
  init_by_lua '
    require "resty.core"
  ';

  server {
    listen 8080;
    default_type text/html;
    server_name ~^(?<domain>.+).dockertest.dev$;

    # /show-services[?nocache] - show Docker Consul Services
    #
    location ~* ^/([\w\d]+)/?$ {
      content_by_lua '
        local nocache = ngx.req.get_uri_args().nocache ~= nil
        local desired = ngx.var[1]
        local consul, template = require "example.consul", require "resty.template"
        local services, err, status, to_render
        services, err, status = consul.getConsulServices()
        if err then
          ngx.status = status or 500
          template.render("error.html", { message = err })
        else

          ngx.say("<html><body>", ngx.var.domain)
          ngx.say(desired, " key check ", " ** ")

          if type(services[ngx.var.domain]) == "table" then
            ngx.say " is an existing service!"
          else
            ngx.say " does not exist"
          end
        end
      ';
    }

    location = / {
      content_by_lua '
        ngx.say "<html><body>Hello from Lua-land! Try <a href=\\"/show-services\\">this link</a> :)"
      ';
    }

    # /show-services[?nocache] - show Docker Consul Services
    #
    location ~* /show-services {
      content_by_lua '
        local nocache = ngx.req.get_uri_args().nocache ~= nil
        local consul, template = require "example.consul", require "resty.template"
        local services, err, status
        services, err, status = consul.getConsulServices()
        if err then
          ngx.status = status or 500
          template.render("error.html", { message = err })
        else
          template.render("services.html", { services = services })
        end
      ';
    }
  }
}
