events { worker_connections 1024; }

http {

  lua_ssl_trusted_certificate "root-certs.pem";
  lua_ssl_verify_depth 2;
  lua_package_path "$prefix/lualib/?.lua;;";

  lua_shared_dict locks 1M;
  lua_shared_dict cache 10M;

  # see https://github.com/openresty/lua-resty-core
  init_by_lua '
    require "resty.core"
  ';

  {{range services}}
    {{ if .Name | contains "rocker" }}
  upstream {{.Name}} {
    least_conn;
    {{range service .Name}}server {{.Address}}:{{.Port}} max_fails=3 fail_timeout=60 weight=1;
    {{else}}server 127.0.0.1:65535; # force a 502{{end}}
  }

  server {
    server_name {{.Name}}.dockertest.dev;

    location / {
      proxy_pass http://{{.Name}};
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
    }
  }
    {{end}}
  {{end}}

  server {
    server_name ~^(?<domain>.+).dockertest.dev$;
    location / {
      content_by_lua '
        local nocache = ngx.req.get_uri_args().nocache ~= nil
        local desired = ngx.var[1]
        local consul, template = require "example.consul", require "resty.template"
        local services, err, status, to_render
        services, err, status = consul.getConsulServices()

        if err then
          ngx.status = status or 500
          template.render("error.html", { message = err })
        else

          ngx.say(ngx.var.domain)
          ngx.say(desired, " key check ", " ** ")

          if type(services[ngx.var.domain]) == "table" then
            ngx.say " is an existing service!"
          else
            ngx.say " does not exist"
          end
        end
      ';
    }
  }
}
